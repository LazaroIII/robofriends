{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/SButton.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","type","id","name","email","className","src","alt","CardList","robots","key","map","user","i","SearchBox","searchChange","Fragment","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","SButton","checked","handleChange","bind","Toggle","Change","htmlFor","handleDiameter","offColor","onColor","offHandleColor","onHandleColor","width","React","App","onSearchChange","event","searchfield","target","value","onToggle","title","document","querySelector","innerHTML","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.533b2ec8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Card = ({ type, id }) => {\r\n    const { name, email } = id;\r\n    return (\r\n        <div className='bg-light-green tc dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            \r\n            <img src={`https://robohash.org/${name}?size=200x200${type}`} alt='Robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots, type }) => {\r\n    let key = (type === 'robofriends') ? '' : '&&set=set2';\r\n    return (\r\n        <div>\r\n            {robots.map((user, i) => <Card key={i} id={robots[i]} type={key}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange, type }) => {\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <input type='search' placeholder={`Search ${type}`} onChange={searchChange} className='pa3  ba b--green bg-lightest-blue' />\r\n            <p></p>\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '530px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport Switch from \"react-switch\";\r\n\r\nclass SButton extends React.Component {\r\n\r\n\r\n    Change() {\r\n        this.props.Toggle()\r\n    }\r\n\r\n    constructor() {\r\n      super();\r\n      this.state = { checked: false };\r\n      this.handleChange = this.handleChange.bind(this);\r\n    }\r\n   \r\n    handleChange(checked) {\r\n      this.setState({ checked });\r\n      this.Change()\r\n    }\r\n   \r\n    render() {\r\n      return (\r\n        <div className='tc' > \r\n\r\n          <label htmlFor=\"small-radius-switch\">\r\n            <Switch\r\n              checked={this.state.checked}\r\n              onChange={this.handleChange}\r\n              handleDiameter={28}\r\n              offColor=\"#08f\"\r\n              onColor=\"#0ff\"\r\n              offHandleColor=\"#0ff\"\r\n              onHandleColor=\"#08f\"\r\n              height={40}\r\n              width={70}\r\n              className=\"react-switch\"\r\n              id=\"small-radius-switch\"/>\r\n          </label>\r\n          <p></p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\nexport default SButton;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport SButton from '../components/SButton'\r\nimport { render } from '@testing-library/react';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '',\r\n            title: 'robofriends'\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('didmount')\r\n        if (this.state.title === 'robofriends') {\r\n            fetch('https://raw.githubusercontent.com/LazaroIII/Users/main/db.json')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }))\r\n        } else {\r\n            fetch('https://gist.githubusercontent.com/rubenCodeforges/ef1f0ce6a055bbb985c0848d8b0c04d5/raw/f91e3d0d2a6d14233fb8fd70c893821effbac5a6/users.json')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }))\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    onToggle = () => {\r\n        const title = this.state.title;\r\n        this.setState({title: document.querySelector('.f1').innerHTML = (title === 'monsterfriends') ? 'robofriends' : 'monsterfriends'});\r\n        //console.log('outside', title)\r\n        if (title === 'monsterfriends') {\r\n            console.log('if2 didupdate', title)\r\n            fetch('https://raw.githubusercontent.com/LazaroIII/Users/main/db.json')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }))\r\n        } else if (title === 'robofriends') {\r\n            console.log('else didupdate', title)\r\n            fetch('https://gist.githubusercontent.com/rubenCodeforges/ef1f0ce6a055bbb985c0848d8b0c04d5/raw/f91e3d0d2a6d14233fb8fd70c893821effbac5a6/users.json')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }))\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const { robots, searchfield, title } = this.state;\r\n        const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchfield.toLowerCase()));\r\n        return !robots.length ? <h1 className='tc'>Loading your friends</h1> :\r\n        (\r\n            <React.Fragment>\r\n                <div className='tc'>\r\n                    <h1 className='f1'>robofriends</h1>\r\n                    \r\n                    <SButton Toggle={this.onToggle}/>\r\n                    \r\n                    <SearchBox searchChange={this.onSearchChange} type={this.state.title}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList type={this.state.title} robots={filteredRobots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n\r\n\r\n        }\r\n        \r\n\r\n    }\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}